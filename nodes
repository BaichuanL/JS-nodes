// charCodeAt()
// #region
// charCodeAt() 是一种字符串方法，用于检索字符串中特定位置的字符的Unicode 值。
string.charCodeAt([position]);
// #endregion


// concat() - 用于连接两个或多个数组
// #region
var a = ["Google", "Taobao"];
var b = ["Runoob", "Wiki", "Zhihu"];
var c = a.concat(b);
document.write(c); // Google,Taobao,Runoob,Wiki,Zhihu
// #endregion


// entries() - 方法返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)。
// #region
// 迭代对象中数组的索引值作为 key， 数组元素作为 value。
//定义数组
let arr12 = ['中文', '英文', '韩语'];
arr12.entries();//返回一个可迭代数组
// [0, "中文"]
// [1, "英文"]
// [2, "韩语"]
for (let [index, value] of arr12.entries()) {
    //利用数组解构
    console.log(index, value)
}
// #endregion


// find() - 方法返回数组中第一个满足条件的元素,找不到返回undefined - ES6新增。
// #region
var testArr1 = [20, 12, 362, 26, 965, 22, 26, 35];
var findItem1 = testArr1.find((item, index, arr) => {
    console.log(item, index, arr);
    return item > 361
    //item：每一次迭代查找的数组元素。index：每一次迭代查找的数组元素索引。arr：被查找的数组。
});
console.log("findItem1", findItem1); //  findItem1 362

//也可以在对象数组中根据对象属性作为判断条件查找
var testArr2 = [{
    name: 'aaa',
    id: '111'
}, {
    name: 'bbb',
    id: '222'
}, {
    name: 'ccc',
    id: '333'
}]
var findItem2 = testArr2.find((item, index, arr) => {
    return item.name == 'ccc'
})
console.log(findItem2) //{name:'ccc',id:'333'}
// #endregion


// findIndex() - 找出第一个符合条件的数组成员的索引号 没找到会返回-1 - ES6新增。
// #region
arr.findIndex(item, index, arr)
// item：每一次迭代查找的数组元素。
// index：每一次迭代查找的数组元素索引。
// arr：被查找的数组。
const arrfi = [{
    id: 1,
    name: '徐毅叶'
},
{
    id: 2,
    name: '黑叶猴'
},
{
    id: 3,
    name: '黑叶猴22'
}]
const result1 = arrfi.findIndex(item => {
    return item.id == 3
})
const result2 = arrfi.findIndex((item, index, arr) => {
    return index > 0
})
const result3 = arrfi.findIndex(item => {
    return item.id > 3
})
console.log(result1); // 2
console.log(result2); // 1
console.log(result3); // -1

var num = this.tableDataChange.findIndex((n) => n.state == "1");
//num == -1
// #endregion


// filter()
// #region
//方法会创建一个新数组，原数组的每个元素传入回调函数中，回调函数中有return返回值，若返回值为true，这个元素保存到新数组中；若返回值为false，则该元素不保存到新数组中；原数组不发生改变。
let values1 = [NaN, 10, 10, 0, 10, 10, 10, 10, 10, 10] //过滤掉NaN和0
let Lit11 = values.filter((item) => {
    return !isNaN(item) && item  //[10, 10, 10, 10, 10, 10, 10, 10]
});

let Lieet1 = values.filter((item, index, arr) => {
    console.log('values', item, index, arr);
    return !isNaN(item) && item
});
//获取两个数组之间的交集
let result11 = maxList.filter((item) => {
    return minList.indexOf(item) > -1
})
// #endregion


// flat(Infinity) - ES6数组 - 实现多维数组转成一维数组
// #region
let arr = [1, 2, , [[3, 4], [5, 6]]]
//使用 Infinity 作为深度，展开任意深度的嵌套数组
//flat() 方法会移除数组中的空项
console.log(arr.flat(Infinity)); // [ 1, 2, 3, 4, 5, 6 ]
console.log(arr.flat()); // [ 1, 2, [3,4],[5,6] ]
console.log(arr.flat(1)); // [ 1, 2, [3,4],[5,6] ]
console.log(arr.flat(2)); // [ 1, 2, 3, 4, 5, 6 ]
// #endregion


// fromCharCode()
// #region
// 将 Unicode 编码转为一个字符:
var n = String.fromCharCode(65); // A
// 将 Unicode 编码转换为一个字符串:
var n = String.fromCharCode(72, 69, 76, 76, 79); // HELLO
// #endregion


// join()
// #region
// join()方法就是将array数据中每个元素都转为字符串，用自定义的连接符分割
// join('')将数组元素无缝拼接
let s12 = Array('a', 'p', 'p', 'l', 'e')
document.write(s.join('')) // apple
//join(' ') 将数组元素以空格分割
let s123 = Array('Apple', 'is', 'on', 'my', 'table')
document.write(s.join(' ')) // Apple is on my table
//join()将数组每个元素都转为字符串，用法等同于toString()
let s1234 = Array(1, 2, 3)
console.log(s)
console.log(s.join()) // 1,2,3
// #endregion


// includes() - 判断字符串是否包含指定的子字符串。
// #region
var str = "Hello world, welcome to the Runoob。";
var n = str.includes("Runoob"); // true
// #endregion


// indexOf 和 lastIndexOf的区别
// #region
//indexOf() 是查某个指定的字符串在字符串首次出现的位置（索引值）（从左往右遍历），找不到就返回-1
string.indexOf(searchvalue, start)
//searchvalue-查找的值
//start-开始的位置，可选，理论上是从0到string.length-1,如省略该参数，则将从字符串的最后一个字符处开始检索。

//lastIndexOf() 是查某个指定的字符串在字符串最后一次出现的位置（索引值）（从左往右遍历），找不到就返回-1
string.lastIndexOf(searchvalue, start)
//searchvalue-查找的值
//start-开始的位置，可选，理论上是从0到string.length-1,如省略该参数，则将从字符串的最后一个字符处开始检索。
// #endregion


// isNAN()
// #region
//isNaN() 函数用于检查其参数是否是非数字值。如果参数值为 NaN 或字符串、对象、undefined等非数字值则返回 true, 否则返回 false。
document.write(isNaN(123)+ "<br>"); // false
document.write(isNaN(-1.23)+ "<br>"); // false
document.write(isNaN(5-2)+ "<br>"); // false
document.write(isNaN(0)+ "<br>"); // false
document.write(isNaN("Hello")+ "<br>"); // true
document.write(isNaN("2005/12/12")+ "<br>"); // true
// #endregion


// localeCompare - 字符串比较
// #region
stringObject.localeCompare(target)
//例子
console.log("aa".localeCompare("ca"));//-1 'aa'<'ca'
console.log("ca".localeCompare("ca"));//0  'aa'='ca'
console.log("ca".localeCompare("aa"));//1  'aa'>'ca'
//大部分时间是配合字符串排序使用
strList.sort((a, b) => {
    return a.localeCompare(b);
});
//a.localCompare(b) – 升序
//b.localCompare(a) – 降序
// #endregion


// map()
// #region
//它返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。值得注意的是：
//1、map()函数不会对空数组进行检测
//2、map()函数不会改变原始数组，它形成的是 一个新的数组

//array.map(function(currentValue, index, arr), thisIndex)
//currentValue：必须。表述当前元素的的值(item)
//index：可选。当前元素的索引也就是第几个数组元素。
//arr：可选。当前元素属于的数组对象
//thisValue：可选。对象作为该执行回调时使用，传递给函数，用作"this"的值

//例1：对原数组元素进行平方后再赋值给新的数组
let array = [1, 2, 3, 4, 5];
let newArray = array.map((item) => {
    return item * item;
})
console.log(newArray)  // [1, 4, 9, 16, 25]
//例2：将int类型的数据换成字符串类型
var arr1 = [1, 2, 3];
var results = arr1.map(String);
console.log("results", results);// ['1', '2', '3']
console.log(results.map(Number))// [1, 2, 3]
// #endregion


// new Map结构
// #region
// 1.创建map
var mymap = new Map() // 创建空map
var map2 = new Map([[1, 2], [true, 3]]) // 有初始参数的map
// set() - map添加新键值
var mymap = new Map()
mymap.set('name', '童')
// has() - map是否有这个键
var mymap = new Map([['name', '童'], [true, 1]])
mymap.has('name') // true
mymap.has('sb') // false
//get() - 获取map某个键的值
var mymap = new Map([['name', '童'], [true, 1]])
mymap.get('name') // 童
mymap.get(true) // 1
//delete() - 删除map某个元素
var mymap = new Map([['name', '童'], [true, 1]])
mymap.delete('name')
//clear() - 清空map
var mymap = new Map([['name', '童'], [true, 1]])
mymap.clear()
//size - 返回map的成员数量
var mymap = new Map([['name', '童'], [true, 1]])
mymap.size // 2
// #endregion


// new Set结构
// #region
// 创建Set实例
const s = new Set();
// 如果想在创建的同时初始化实例，则可以给 Set 构造函数传入一个可迭代对象，其中需要包含插入到新集合实例中的元素(Set 可以包含任何 JavaScript 数据类型作为值)：
const s1 = new Set(["val1", 1, true, {}, undefined, function fun() { }]);
// Set结构不会添加重复的值 - 经常用Set解决数组去重问题
const s2 = new Set([1, 1, 2, 3, 4, 4, 5, 6, 7, 4, 2, 1]);
Array.from(s); //  [1, 2, 3, 4, 5, 6, 7]
// size属性
const s3 = new Set([1, 2, 3]);
s.size; // 3
// add(): 添加元素
const s4 = new Set();
s.add(1).add(2).add(3);
Array.from(s); // [1, 2, 3]
//has()
const s5 = new Set();
s.add(1).add(2).add(3);
s.has(1); // true
//delete()
const s6 = new Set();
s.add(1).add(2);
s.delete(1);
Array.from(s); // [2]
//clear()
const s7 = new Set();
s.add(1).add(2).add(3);
Array.from(s); // [1, 2, 3]
s.clear();
Array.from(s); // []
//迭代
//keys():返回键名;
//values(): 返回键值；
//entries(): 返回键值对;
const s8 = new Set();
s.add(1).add(2).add(3);
Array.from(s.keys()); // [1, 2, 3]
Array.from(s.values()); // [1, 2, 3]
Array.from(s.entries()); // [[1, 1], [2, 2], [3, 3]]
//for-of
const s9 = new Set();
s.add(1).add(2).add(3);
for (const i of s) {
    console.log(i);
}
// 1
// 2
// 3
//forEach
const s10 = new Set();
s.add(1).add(2).add(3);
s.forEach((value, key) => console.log(key + ' : ' + value));
// 1 : 1
// 2 : 2
// 3 : 3
// #endregion


// Number.MIN_SAFE_INTEGER & Number.MAX_VALUE
// #region
let getMin = Number.MIN_SAFE_INTEGER; // JavaScript中最小的安全的integer型数字
let getMax = Number.MAX_VALUE;        // JavaScript 里所能表示的最大数值
// #endregion


// Object.values() - 返回一个数组，其元素是在对象上找到的可枚举属性值。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。
// #region
// Object.values(obj)
// Object.values()返回一个数组，其元素是在对象上找到的可枚举属性值。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。
var obj = { foo: 'bar', baz: 42 };
console.log(Object.values(obj)); // ['bar', 42]
// #endregion


// reduce()
// #region
arr.reduce(callback, [initialValue])
//callback （执行数组中每个值的函数，包含四个参数）
//1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））
//2、currentValue （数组中当前被处理的元素）
//3、index （当前元素在数组中的索引）
//4、array （调用 reduce 的数组）
//initialValue （作为第一次调用 callback 的第一个参数。）
//reduce的用法
//1. 数组求和，求乘
var arr1 = [1, 2, 3, 4];
var sum = arr1.reduce((x, y) => x + y)
var mul = arr1.reduce((x, y) => x * y)
console.log(sum); //求和，10
console.log(mul); //求乘积，24

//2. 计算数组中每个元素出现的次数
let names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];
let nameNum = names.reduce((pre, cur) => {
    if (cur in pre) {
        pre[cur]++
    } else {
        pre[cur] = 1
    }
    return pre
}, {})
console.log(nameNum); //{Alice: 2, Bob: 1, Tiff: 1, Bruce: 1}

//3. 数组去重
let arr1 = [1, 2, 3, 4, 4, 1]
let newArr = arr.reduce((pre, cur) => {
    if (!pre.includes(cur)) {
        return pre.concat(cur)
    } else {
        return pre
    }
}, [])
console.log(newArr);// [1, 2, 3, 4]

//4. 将二维数组转化为一维
let arr1 = [[0, 1], [2, 3], [4, 5]]
let newArr1 = arr1.reduce((pre, cur) => {
    return pre.concat(cur)
}, [])
console.log(newArr); // [0, 1, 2, 3, 4, 5]

//5. 对象里的属性求和
var result4 = [
    {
        subject: 'math',
        score: 10
    },
    {
        subject: 'chinese',
        score: 20
    },
    {
        subject: 'english',
        score: 30
    }
];
var sum = result4.reduce(function (prev, cur) {
    return cur.score + prev;
}, 0);
console.log(sum) //60
// #endregion


// 截取字符串 - slice() & substr()
// #region
slice() //返回一个索引和另一个索引之间的字符串(不改变原字符串),slice(start,end)有两个参数,都是索引,返回值不包括end
//start：必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。
//end：可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。
var str = "abcdefg"
console.log(str.slice(1, 5))//bcde,取1到5（不包含5）
console.log(str.slice(1))//bcdefg，取1到最后
console.log(str.slice(-9, 5))//abcde，开始位置倒数第9个元素，不存在，位置从0开始，从0到5（不包含5）
console.log(str.slice(-2, -9))//""，开始位置倒数第2个元素，即第五个5；取到倒数第9个不存在，返回空字符串

substr() //返回从开始位置到指定字符数的长度 substr(start,length)(不改变原字符串),start为索引,length为从开始索引计算的字符长度
//start：必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。
//length：可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 开始位置到结尾的字串。
var str = "abcdefg";
console.log(str.substr(2)) //  cdefg,截取-从下标2到最后
console.log(str.substr(2, 3)) // cde,截取-从下标2开始，3个字符
console.log(str.substr(-1)) // g ,截取-从下标倒数第1个(此处是正数第6个)到最后
console.log(str.substr(-4, 2)) // de ,截取-从下标倒数第4个(此处也是正数第4个)开始,到最后
console.log(str.substr(-10, 2))//ab 开始位置倒数第10个元素，不存在，位置从0开始，从0到2（不包含2）

substring() //返回一个索引和另一个索引之间的字符串(不改变原字符串),substring(start,end)有两个参数(start必需,end选填),都是索引,返回值不包括end
//任意参数小于0都视为0,两参数都为负数或两参数相等返回空字符
//如果 第一个参数 比 第二个参数大，那么该方法在提取子串之前会先交换这两个参数。
var str = "abcdefg";
//任意参数小于0都视为0
console.log(str.substring(-1, 5)) //01234  开始索引为0 结束索引为5(不包括5)
//两参数都为负数或两参数相等返回空字符
console.log(str.substring(-1, -5)) //返回空,0到0
//如果 第一个参数 比 第二个参数大，那么该方法在提取子串之前会先交换这两个参数。
console.log(str.substring(5, 2)) //2到5
// #endregion


// 截取数组 - slice() & splice()
// #region
slice(start, end) // 返回一个索引和另一个索引之间的数据(不改变原数组),slice(start,end)有两个参数(start必需,end选填),都是索引,返回值不包括end
var list = ['1', '2', '3', '4', '5', '6', '7', '8'];
console.log(list.slice(1, 4)) //  [ "2", "3", "4" ]开始索引为1 结束索引为4(不包括4)
console.log(list) //['1', '2', '3', '4', '5', '6', '7', '8']不改变原数组
//list.slice(-1, 4)<==>list.slice(7, 4)
console.log(list.slice(-1, 4)) //[]  倒数第一个，即第七个到第四个，没有截取部分，返回空数组
console.log(list.slice(7, 4)) //[]  
//开始为负数，同时也不存在时，从0开始截取
console.log(list.slice(-20, 4)) // ['1', '2', '3', '4']
console.log(list.slice(-20)) //['1', '2', '3', '4', '5', '6', '7', '8']
//list.slice(-6, -1) <===>list.slice(2, 7)
console.log(list.slice(-6, -1)) //['3', '4', '5', '6', '7']

splice() // 用来添加或者删除数组的数据,只返回被删除的数据,类型为数组(改变原数组)
list.splice(index, howmany, item1, ...itemX)
// index 必须，整数，规定添加，删除项目的位置，使用负数可从数组结尾处规定位置。
// howmany 必须。要删除的项目数量。如果设置为0（小于0也视作0），也不会删除项目
var list = ['1', '2', '3', '4', '5', '6', '7', '8'];
// 当只有索引,从当前索引截取到最后
console.log(list.splice(1, 1)) // ['2']
console.log(list.splice(1, 0)) // [];
console.log(list.splice(-2, 2)) // ['7', '8'];
console.log(list.splice(1, -10)) //[]
console.log(list.splice(1, 2, ['张龙'], '赵虎', '张三')) // ['3', '4']
console.log(list) //  ['1', Array(1), '赵虎','张三', '5', '6']
// #endregion


// shift()
// #region
// shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。
// 如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。该方法不创建新数组，而是直接修改原有的 arrayObject。
var arr1 = new Array(3)
arr[0] = "George"
arr[1] = "John"
arr[2] = "Thomas"
 
document.write(arr + "<br />") // George,John,Thomas
document.write(arr.shift() + "<br />") // George
document.write(arr) // John,Thomas
// #endregion


// substr()
// #region
string.substr(start,length)

var str="Hello world!";
var n=str.substr(2,3) // llo
// #endregion


// unshift()
// #region
// 将新项添加到数组起始位置
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon", "Pineapple");
// Lemon,Pineapple,Banana,Orange,Apple,Mango
// #endregion


// 数字转数组
// #region
    n = n.toString()
    n = n.split('').map(item => {
        return +item
    })
// #endregion
